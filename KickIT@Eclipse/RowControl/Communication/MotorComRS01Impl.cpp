#include <iostream>
#include <stdio.h>
#include <unistd.h>
#include "MotorComRS01Impl.hpp"

using namespace std;

MotorComRS01Impl::MotorComRS01Impl(Row r) {
	this->socketId = 0;
	this->port = "can0";
	this->row = r;
	driverInit();
}

void MotorComRS01Impl::kick() {
	//TODO
}

void MotorComRS01Impl::homing() {
	cout << "homing() is not supported" << endl;
}

void MotorComRS01Impl::driverInit(){
	cout << "driverInit() RS01:" << endl;
	cout << "(1/6) Reset" << endl;
	frameInit(0x602, 0x8, 0x23, 0x00, 0x20, 0xB, 0x00, 0x00, 0x00, 0x00);
	frameInit(0x603, 0x8, 0x23, 0x00, 0x20, 0xB, 0x00, 0x00, 0x00, 0x00);


	if(!this->initNibbleRStranslational){
		cout << "Initial Motorcommunication RST" << endl;
		frameInit(0x602, 0x8, 0x23, 0x00, this->nibbleTranslational, 0xB, 0x00, 0x00, 0x00, 0x00);
		frameInit(0x602, 0x8, 0x23, 0x00, this->nibbleTranslational, 0xB, 0x00, 0x00, 0x00, 0x00);

		this->initNibbleRStranslational = true;
	} else {
		frameInit(0x602, 0x8, 0x23, 0x00, this->nibbleTranslational, 0xB, 0x00, 0x00, 0x00, 0x00);
	}

	if(!this->initNibbleRSrotary){
		cout << "Initial Motorcommunication RSR" << endl;
		frameInit(0x603, 0x8, 0x23, 0x00, this->nibbleRotary, 0xB, 0x00, 0x00, 0x00, 0x00);
		frameInit(0x603, 0x8, 0x23, 0x00, this->nibbleRotary, 0xB, 0x00, 0x00, 0x00, 0x00);

		this->initNibbleRSrotary = true;
	} else {
		frameInit(0x603, 0x8, 0x23, 0x00, this->nibbleRotary, 0xB, 0x00, 0x00, 0x00, 0x00);
	}




	sleep(20);

	cout << "(2/6) Operational" << endl;
	frameInit(0x00, 0x2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
	sleep(2);

	//Send switch on with differnt Nibbles, unkown Nibble after termination
	cout << "(3/6) Ready to switch on" << endl;
	frameInit(0x202, 0x8, 0x3E, 0x00, this->nibbleTranslational, 0x00, 0x00, 0x00, 0x00, 0x00);
	frameInit(0x203, 0x8, 0x3E, 0x00, this->nibbleRotary, 0x00, 0x00, 0x00, 0x00, 0x00);
	frameInit(0x80, 0x0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
	sleep(2);

	cout << "(4/6) Switching on" << endl;
	frameInit(0x202, 0x8, 0x3F, 0x00, this->nibbleTranslational, 0x00, 0x00, 0x00, 0x00, 0x00);
	frameInit(0x203, 0x8, 0x3F, 0x00, this->nibbleRotary, 0x00, 0x00, 0x00, 0x00, 0x00);
	frameInit(0x80, 0x0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
	sleep(2);

	cout << "(5/6) Homing" << endl;
	frameInit(0x202, 0x8, 0x3F, 0x08, this->nibbleTranslational, 0x00, 0x00, 0x00, 0x00, 0x00);
	frameInit(0x203, 0x8, 0x3F, 0x08, this->nibbleRotary, 0x00, 0x00, 0x00, 0x00, 0x00);
	frameInit(0x80, 0x0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
	sleep(25);

	cout << "(6/6) Homed\n" << endl;
	frameInit(0x202, 0x8, 0x3F, 0x00, this->nibbleTranslational, 0x00, 0x00, 0x00, 0x00, 0x00);
	frameInit(0x203, 0x8, 0x3F, 0x00, this->nibbleRotary, 0x00, 0x00, 0x00, 0x00, 0x00);
	frameInit(0x80, 0x0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
}


void MotorComRS01Impl::linearMovement(int position){
	position += 150;							//Rescale center to zero
	if(position > 300) position = 300;			//Check if position is within range
	if(position < 0) position = 0;				//Check if position is within range

	int pos1, pos2;
	position *= 10;
	pos1 = (position & 255);
	pos2 = (position >> 8);

	frameInit(0x202, 0x8, 0x3F, 0x00, this->nibbleTranslational, 0x09, pos1, pos2, 0xFF, 0xFF);
	frameInit(0x302, 0x8, 0x2C, 0x01, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00);
	frameInit(0x80, 0x0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
}
